// Code generated by "packer-sdc mapstructure-to-hcl2"; DO NOT EDIT.

package config

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

// FlatChrootMount is an auto-generated flat version of ChrootMount.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatChrootMount struct {
	MountType       *string `mapstructure:"mount_type" cty:"mount_type" hcl:"mount_type"`
	SourcePath      *string `mapstructure:"source_path" cty:"source_path" hcl:"source_path"`
	DestinationPath *string `mapstructure:"destination_path" cty:"destination_path" hcl:"destination_path"`
}

// FlatMapstructure returns a new FlatChrootMount.
// FlatChrootMount is an auto-generated flat version of ChrootMount.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*ChrootMount) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatChrootMount)
}

// HCL2Spec returns the hcl spec of a ChrootMount.
// This spec is used by HCL to read the fields of ChrootMount.
// The decoded values from this spec will then be applied to a FlatChrootMount.
func (*FlatChrootMount) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"mount_type":       &hcldec.AttrSpec{Name: "mount_type", Type: cty.String, Required: false},
		"source_path":      &hcldec.AttrSpec{Name: "source_path", Type: cty.String, Required: false},
		"destination_path": &hcldec.AttrSpec{Name: "destination_path", Type: cty.String, Required: false},
	}
	return s
}

// FlatPartition is an auto-generated flat version of Partition.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatPartition struct {
	Index                 *int     `mapstructure:"int" cty:"int" hcl:"int"`
	Name                  *string  `mapstructure:"name" cty:"name" hcl:"name"`
	Type                  *string  `mapstructure:"type" cty:"type" hcl:"type"`
	Size                  *string  `mapstructure:"size" cty:"size" hcl:"size"`
	StartSector           *int     `mapstructure:"start_sector" cty:"start_sector" hcl:"start_sector"`
	Filesystem            *string  `mapstructure:"filesystem" cty:"filesystem" hcl:"filesystem"`
	FilesystemMakeOptions []string `mapstructure:"filesystem_make_options" cty:"filesystem_make_options" hcl:"filesystem_make_options"`
	Mountpoint            *string  `mapstructure:"mountpoint" cty:"mountpoint" hcl:"mountpoint"`
	ResizeFs              *bool    `mapstructure:"resize_fs" cty:"resize_fs" hcl:"resize_fs"`
	SkipMkfs              *bool    `mapstructure:"skip_mkfs" cty:"skip_mkfs" hcl:"skip_mkfs"`
}

// FlatMapstructure returns a new FlatPartition.
// FlatPartition is an auto-generated flat version of Partition.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*Partition) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatPartition)
}

// HCL2Spec returns the hcl spec of a Partition.
// This spec is used by HCL to read the fields of Partition.
// The decoded values from this spec will then be applied to a FlatPartition.
func (*FlatPartition) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"int":                     &hcldec.AttrSpec{Name: "int", Type: cty.Number, Required: false},
		"name":                    &hcldec.AttrSpec{Name: "name", Type: cty.String, Required: false},
		"type":                    &hcldec.AttrSpec{Name: "type", Type: cty.String, Required: false},
		"size":                    &hcldec.AttrSpec{Name: "size", Type: cty.String, Required: false},
		"start_sector":            &hcldec.AttrSpec{Name: "start_sector", Type: cty.Number, Required: false},
		"filesystem":              &hcldec.AttrSpec{Name: "filesystem", Type: cty.String, Required: false},
		"filesystem_make_options": &hcldec.AttrSpec{Name: "filesystem_make_options", Type: cty.List(cty.String), Required: false},
		"mountpoint":              &hcldec.AttrSpec{Name: "mountpoint", Type: cty.String, Required: false},
		"resize_fs":               &hcldec.AttrSpec{Name: "resize_fs", Type: cty.Bool, Required: false},
		"skip_mkfs":               &hcldec.AttrSpec{Name: "skip_mkfs", Type: cty.Bool, Required: false},
	}
	return s
}
